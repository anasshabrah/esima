// src/app/api/admin/dashboard/route.ts

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { verifyAdminAccess } from '@/utils/adminAuth';

export async function GET(request: NextRequest) {
  // Use the centralized admin verification function.
  const { isAuthorized, admin, error } = await verifyAdminAccess(request);
  if (!isAuthorized) {
    return NextResponse.json({ error }, { status: 401 });
  }
  
  try {
    // Determine the start dates for the current and previous months.
    const now = new Date();
    const currentMonth = now.getMonth();
    const previousMonth = (currentMonth - 1 + 12) % 12;
    const currentYear = now.getFullYear();
    const previousYear = currentMonth === 0 ? currentYear - 1 : currentYear;
    
    const startOfCurrentMonth = new Date(currentYear, currentMonth, 1);
    const startOfPreviousMonth = new Date(previousYear, previousMonth, 1);
    
    // Total users and month-over-month user growth.
    const totalUsers = await prisma.user.count();
    const usersCurrentMonth = await prisma.user.count({
      where: { createdAt: { gte: startOfCurrentMonth } }
    });
    const usersPreviousMonth = await prisma.user.count({
      where: {
        createdAt: {
          gte: startOfPreviousMonth,
          lt: startOfCurrentMonth
        }
      }
    });
    const usersChange = usersPreviousMonth > 0
      ? Math.round(((usersCurrentMonth - usersPreviousMonth) / usersPreviousMonth) * 100)
      : 0;
    
    // Total orders and month-over-month order growth.
    const totalOrders = await prisma.order.count();
    const ordersCurrentMonth = await prisma.order.count({
      where: { createdAt: { gte: startOfCurrentMonth } }
    });
    const ordersPreviousMonth = await prisma.order.count({
      where: {
        createdAt: {
          gte: startOfPreviousMonth,
          lt: startOfCurrentMonth
        }
      }
    });
    const ordersChange = ordersPreviousMonth > 0
      ? Math.round(((ordersCurrentMonth - ordersPreviousMonth) / ordersPreviousMonth) * 100)
      : 0;
    
    // Total revenue and revenue growth percentage.
    const totalRevenueResult = await prisma.order.aggregate({
      _sum: { amount: true }
    });
    const totalRevenue = totalRevenueResult._sum.amount || 0;
    
    const revenueCurrentMonth = await prisma.order.aggregate({
      where: { createdAt: { gte: startOfCurrentMonth } },
      _sum: { amount: true }
    });
    const revenuePreviousMonth = await prisma.order.aggregate({
      where: {
        createdAt: {
          gte: startOfPreviousMonth,
          lt: startOfCurrentMonth
        }
      },
      _sum: { amount: true }
    });
    const currentMonthRevenue = revenueCurrentMonth._sum.amount || 0;
    const previousMonthRevenue = revenuePreviousMonth._sum.amount || 0;
    const revenueChange = previousMonthRevenue > 0
      ? Math.round(((currentMonthRevenue - previousMonthRevenue) / previousMonthRevenue) * 100)
      : 0;
    
    // Active eSIMs and pending withdrawals.
    // *** IMPORTANT: Use prisma.eSIM (with capital "SIM") as generated by Prisma. ***
    const activeEsims = await prisma.eSIM.count({
      where: { status: 'ACTIVE' }
    });
    const pendingWithdrawals = await prisma.withdrawal.count({
      where: { status: 'PENDING' }
    });
    
    // Log the dashboard view action.
    await prisma.adminAuditLog.create({
      data: {
        userId: admin.id,
        action: 'view',
        entityType: 'dashboard',
        details: JSON.stringify({ timestamp: new Date() }),
        ipAddress: request.headers.get('x-forwarded-for') || '',
        userAgent: request.headers.get('user-agent') || '',
      },
    });
    
    return NextResponse.json({
      totalUsers,
      totalOrders,
      totalRevenue,
      activeEsims,
      pendingWithdrawals,
      usersChange,
      ordersChange,
      revenueChange
    });
  } catch (error) {
    console.error('Error fetching dashboard data:', error);
    return NextResponse.json(
      { error: 'Failed to fetch dashboard data' },
      { status: 500 }
    );
  }
}
